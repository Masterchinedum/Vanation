// Define the Prisma client provider
generator client {
  provider = "prisma-client-js"
}

// Configure the connection to your MongoDB database
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define the User model (updated)
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// Relationships
  favorites Favorite?  @relation(fields: [id], references: [userId])
  orders     Order[]     @relation(fields: [id], references: [userId])
  coupons    Coupon[]    @relation(fields: [id], references: [userId])
  messages   Message[]  @relation(fields: [id], references: [userId])
       }


// Define the enumeration for user roles
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

// Define the Shop model
model Shop {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  owner       User  @relation(fields: [ownerId], references: [id])
  vans        Van[]    @relation(fields: [id], references: [shopId])
  orders      Order[]  @relation(fields: [id], references: [shopId])
  visits      Int     @default(0)
}

// Define the Van model
model Van {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Int?
  imageUrl    String?
  shopId      String
  availability Availability
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  shop        Shop     @relation(fields: [shopId], references: [id])
  orders      Order[]  @relation(fields: [id], references: [vanId])
}

// Define the enumeration for van availability
enum Availability {
  AVAILABLE
  RENTED
  SOLD
}

// Define the Order model
model Order {
  id          String   @id @default(cuid())
  userId      String
  vanId       String
  shopId      String
  status       OrderStatus
  placedAt    DateTime @default(now())
  completedAt DateTime?

  // Relationships
  user        User  @relation(fields: [userId], references: [id])
  van         Van    @relation(fields: [vanId], references: [id])
  shop        Shop   @relation(fields: [shopId], references: [id])
}

// Define the enumeration for order status
enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

// Define the Favorite model (optional, adjust based on your needs)
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  vanId     String

  // Relationships
  user      User  @relation(fields: [userId], references: [id])
  van       Van    @relation(fields: [vanId], references: [id])

  // Consider adding a unique constraint on (userId, vanId) if you want to prevent duplicate favorites
  @@unique(fields: [userId, vanId])
}

// Define the Coupon model
model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  discount    Int
  description String?
  userId     String?
  expiresAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User  @relation(fields: [userId], references: [id])
}

// Define the Message model (optional, adjust based on your needs)
model Message {
  id          String   @id @default(cuid())
  content     String
  from        String   // User ID or System
  to          String   // User ID
  createdAt   DateTime @default(now())
}

