generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  password    String
  name        String
  role        Role     @default(USER)
  favoriteVans  UserVan[]    @relation(fields: [favoriteVanIds], references: [id])
  //favoriteVanIds String[] @db.ObjectId
  shops      Shop[]
  orders      Order[]
  coupons     Coupon[]
  messages    Message[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Van {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  make        String
  model       String
  year        Int
  price       Float
  shop        Shop      @relation(fields: [shopId], references: [id])
  shopId      String    @db.ObjectId
  orders      Order[]
  visits      Visit[]
  favouritedBy  UserVan[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Shop {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  vans        Van[]
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  van         Van       @relation(fields: [vanId], references: [id])
  vanId       String    @db.ObjectId
  status      OrderStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Coupon {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  discount    Float
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Visit {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  van         Van       @relation(fields: [vanId], references: [id])
  vanId       String    @db.ObjectId
  visitedAt   DateTime  @default(now())
  }



enum Role {
model UserVan {
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
  van      Van    @relation(fields: [vanId], references: [id])
  vanId    String @db.ObjectId
  addedAt  DateTime @default(now())

  @@id([userId, vanId])
}
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}


